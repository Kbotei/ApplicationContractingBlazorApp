@page "/application/applicant-details"
@inject ILogger<ApplicantDetails> Logger
@using Data;

<h3>Applicant Details</h3>

<EditForm EditContext="editContext" OnValidSubmit="Submit" FormName="ApplicantInfo">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-6">
            <label for="firstName" class="form-label">First Name</label>
            <input type="text" class="form-control" id="firstName" @bind-value="Model!.FirstName">
            <ValidationMessage class="invalid-feedback" For="() => Model.FirstName" />
        </div>
        <div class="col-md-6">
            <label for="lastName" class="form-label">Last Name</label>
            <input type="text" class="form-control" id="lastName" @bind-value="Model!.LastName">
            <ValidationMessage class="invalid-feedback" For="() => Model.LastName" />
        </div>
    </div>

    <div class="row g-3">
        <div class="col-6">
            <label for="email" class="form-label">Email</label>
            <input type="email" class="form-control" id="email" @bind-value="Model!.Email">
            <ValidationMessage class="invalid-feedback" For="() => Model.Email" />
        </div>

        <div class="col-6">
            <label for="phoneNumber" class="form-label">Phone Number</label>
            <input type="tel" class="form-control" id="phoneNumber" @bind-value="Model!.PhoneNumber">
            <ValidationMessage class="invalid-feedback" For="() => Model.PhoneNumber" />
        </div>
    </div>

    <div class="row g-3">
        <div class="col-12">
            <label for="address" class="form-label">Street Address</label>
            <input type="text" class="form-control" id="address" @bind-value="Model!.StreetAddress">
            <ValidationMessage class="invalid-feedback" For="() => Model.StreetAddress" />
        </div>

        <div class="col-4">
            <label for="city" class="form-label">City</label>
            <input type="text" class="form-control" id="city" @bind-value="Model!.City">
            <ValidationMessage class="invalid-feedback" For="() => Model.City" />
        </div>

        <div class="col-4">
            <label for="state" class="form-label">State</label>
            <select class="form-control" id="state" selectedValue="@Model!.State">
                <option value=""></option>
                <option checked="@(Model.State == "AK") value="AK">Alaska</option>
                <option checked="@(Model.State == "AL") value="AL">Alabama</option>
                <option checked="@(Model.State == "NY") value="NY">New York</option>
            </select>
            <ValidationMessage class="invalid-feedback" For="() => Model.State" />
        </div>

        <div class="col-4">
            <label for="zipCode" class="form-label">Zip Code</label>
            <input type="text" class="form-control" id="zipCode" @bind-value="Model!.ZipCode">
            <ValidationMessage class="invalid-feedback" For="() => Model.ZipCode" />
        </div>

        
    </div>

    <div class="row g-3 mt-3">
        <div class="col-12">
            <button type="submit" class="btn btn-primary">Submit</button>
        </div>
    </div>
</EditForm>

@code {
    [SupplyParameterFromForm]
    private ApplicantModel? Model { get; set; }

    private EditContext? editContext;

    protected override void OnInitialized() {
        Model ??= new();
        editContext = new(Model);
    }

    private void Submit()
    {
        Logger.LogInformation("FirstName = {FirstName} LastName = {LastName} ",
               Model?.FirstName, Model?.LastName);
    }
}
